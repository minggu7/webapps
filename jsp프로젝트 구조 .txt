test/
├── index.jsp               <- 사용자 접근 가능한 JSP
├── dbtest.jsp              <- 사용자 접근 가능한 JSP
├── dbinsert.jsp            <- 사용자 접근 가능한 JSP
└── WEB-INF/
    ├── web.xml             <- 설정 파일
    ├── lib/                <- JDBC 드라이버 등 라이브러리
    │   └── mysql-connector-j-xxx.jar
    └── classes/            <- 자바 클래스 파일들 (필요시)


SP는 WEB-INF 밖에 둬야 브라우저로 접근 가능해.
반대로 WEB-INF 안에 있는 건 브라우저로 직접 접근할 수 없어!
그래서 중요한 설정이나 클래스, 라이브러리는 WEB-INF 안에 넣는 거야.



System.out.println()은 콘솔용, out.println()은 브라우저 페이지용!


e.printStackTrace(); 설명 & 예시
✅ 역할:
에러 상세 정보를 콘솔에 출력해줘.

어디서, 왜 실패했는지 보여주는 디버깅 도구야.

이건 웹페이지엔 안 보이고, 톰캣 서버의 콘솔에 출력됨.



DB 설정 부분
finally {
        // try든 catch든 마지막에 무조건 실행되는 블록
        // 연결이 열려 있으면 닫기 (자원 반납)
        if (conn != null) try { conn.close(); } catch (Exception e) {} // 연결 종료
    }

conn != null이 왜 필요한가?
연결이 아예 실패하면 conn은 여전히 null이야.

그런 상태에서 conn.close() 하면 NullPointerException이 발생함.

그래서 닫기 전에 null 확인 먼저 하는 거야.

if (conn != null) conn.close();

왜 conn.close()를 try문 안이 아니라 finally에서 하나?
🔥 이유 1: 예외가 발생해도 자원을 반드시 정리해야 하니까
만약 try 블록에서 연결 후에 다른 DB 작업 하다가 예외가 발생하면,

try 블록 안에 conn.close()가 도달하지 못하고 그냥 catch로 넘어가.

그럼 연결이 열린 채로 남아버려 → 자원 누수 발생!!

✅ 그래서 무조건 마지막에 실행되는 finally에서 닫는 거야.

전체 흐름 다시 간단히 요약하면
1️⃣ JSP 실행 중 try 블록에서
DB 연결하고

SQL 실행하고 (데이터 조회, 삽입, 수정 등)

그 결과를 웹 페이지에 out.println() 같은 걸로 출력함

2️⃣ 모든 처리 끝나면 finally 블록에서
conn.close()로 연결 종료

💡 자원 낭비 방지 + 연결 누수 예방

✅ 그리고 JSP 특징 하나 더!
🔁 JSP는 파일만 수정하면 서버 리로딩 없이도 바로 반영돼!

JSP는 요청 시 서버가 자동으로 새로 컴파일해서 실행하기 때문에
HTML 바꾸거나, 자바 코드 조금 바꾸는 건 즉시 반영돼.

단! web.xml 같은 설정 파일이나 lib에 JAR 추가/변경했을 때는
서버 재시작 or 리로딩이 필요해.

✍️ 결론
✔ try에서 DB 사용 끝나고
✔ finally에서 연결 끊고
✔ JSP는 수정하면 바로 반영되니까 빠르게 개발 가능!

